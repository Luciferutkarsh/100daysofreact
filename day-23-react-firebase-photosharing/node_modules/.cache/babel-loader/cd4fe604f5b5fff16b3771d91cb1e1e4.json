{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { projectFirestore, projectStorage } from '../firebase/config';\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    // references where file should be saved / used\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    storageRef.put(file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      collectionRef.add({\n        url,\n        createdAt\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage; // resume at 33:49","map":{"version":3,"sources":["/Users/jameshubert/Documents/Programming/100DaysOfReact/day-23-react-firebase-photosharing/src/hooks/useStorage.js"],"names":["useState","useEffect","projectFirestore","projectStorage","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","add","createdAt"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,oBAAjD;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMW,UAAU,GAAGT,cAAc,CAACU,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGb,gBAAgB,CAACc,UAAjB,CAA4B,QAA5B,CAAtB;AAEAJ,IAAAA,UAAU,CAACK,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CACE,eADF,EAEGC,IAAD,IAAU;AACR,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAf,MAAAA,WAAW,CAACa,UAAD,CAAX;AACD,KALH,EAMGG,GAAD,IAAS;AACPd,MAAAA,QAAQ,CAACc,GAAD,CAAR;AACD,KARH,EASE,YAAY;AACV,YAAMb,GAAG,GAAG,MAAME,UAAU,CAACY,cAAX,EAAlB;AACAT,MAAAA,aAAa,CAACU,GAAd,CAAkB;AAAEf,QAAAA,GAAF;AAAOgB,QAAAA;AAAP,OAAlB;AACAf,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAbH;AAeD,GApBQ,EAoBN,CAACL,IAAD,CApBM,CAAT;AAsBA,SAAO;AAAEC,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AACD,CA5BD;;AA8BA,eAAeJ,UAAf,C,CAEA","sourcesContent":["import { useState, useEffect } from 'react';\nimport { projectFirestore, projectStorage } from '../firebase/config';\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // references where file should be saved / used\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n\n    storageRef.put(file).on(\n      'state_changed',\n      (snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (err) => {\n        setError(err);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\n\nexport default useStorage;\n\n// resume at 33:49\n"]},"metadata":{},"sourceType":"module"}