{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","snapshotObj","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","whileHover","opacity","layout","key","onClick","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21355d3c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className='title'>\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Click the button below to upload a photo.</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: 'AIzaSyBKEkSZeS10wPbzXSBdpYzwVuu4hgTMNac',\n  authDomain: 'firegram-b75f5.firebaseapp.com',\n  projectId: 'firegram-b75f5',\n  storageBucket: 'firegram-b75f5.appspot.com',\n  messagingSenderId: '953065772353',\n  appId: '1:953065772353:web:78ba0e9fedc7f6d5537dc0',\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from 'react';\nimport {\n  projectFirestore,\n  projectStorage,\n  timestamp,\n} from '../firebase/config';\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // references where file should be saved / used\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n\n    storageRef.put(file).on(\n      'state_changed',\n      (snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (err) => {\n        setError(err);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        const createdAt = timestamp();\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\n\nexport default useStorage;\n","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\nimport { motion } from 'framer-motion';\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { progress, url } = useStorage(file);\n\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return (\n    <motion.div\n      className='progress-bar'\n      initial={{ width: 0 }}\n      animate={{ width: progress + '%' }}\n    ></motion.div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  const types = ['image/png', 'image/jpg', 'image/jpeg'];\n\n  const changeHandler = (e) => {\n    const selected = e.target.files[0];\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n    } else {\n      setFile(null);\n      setError('Please select an image (png, jpg or jpeg) file type.');\n    }\n  };\n\n  return (\n    <form className='upload-form'>\n      <label>\n        <input type='file' onChange={changeHandler} />\n        <span>+</span>\n      </label>\n      <div className='output'>\n        {error && <div className='error'>{error}</div>}\n        {file && <div>{file.name}</div>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default UploadForm;\n","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot((snapshotObj) => {\n        let documents = [];\n        snapshotObj.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n  }, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore('images');\n  return (\n    <div className='img-grid'>\n      {docs &&\n        docs.map((doc) => (\n          <motion.div\n            whileHover={{ opacity: 1 }}\n            layout\n            className='img-wrap'\n            key={doc.id}\n            onClick={() => setSelectedImg(doc.url)}\n          >\n            <motion.img\n              src={doc.url}\n              alt='firestore pic'\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1 }}\n            />\n          </motion.div>\n        ))}\n    </div>\n  );\n};\n\nexport default ImageGrid;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nfunction Modal({ selectedImg, setSelectedImg }) {\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  };\n  return (\n    <motion.div\n      className='backdrop'\n      onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img\n        src={selectedImg}\n        alt='enlarged modal pic'\n        initial={{ y: '-100vh' }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  );\n}\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className='App'>\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}